/*
* generated by Xtext
*/
grammar InternalFastBpmn;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package com.laegler.fastbpmn.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.laegler.fastbpmn.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.laegler.fastbpmn.services.FastBpmnGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private FastBpmnGrammarAccess grammarAccess;
 	
    public InternalFastBpmnParser(TokenStream input, FastBpmnGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FDocumentRoot";	
   	}
   	
   	@Override
   	protected FastBpmnGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFDocumentRoot
entryRuleFDocumentRoot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDocumentRootRule()); }
	 iv_ruleFDocumentRoot=ruleFDocumentRoot 
	 { $current=$iv_ruleFDocumentRoot.current; } 
	 EOF 
;

// Rule FDocumentRoot
ruleFDocumentRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFDocumentRootAccess().getExternalRefsFExternalParserRuleCall_0_0()); 
	    }
		lv_externalRefs_0_0=ruleFExternal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDocumentRootRule());
	        }
       		add(
       			$current, 
       			"externalRefs",
        		lv_externalRefs_0_0, 
        		"FExternal");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDocumentRootAccess().getPackagesFProcessPackageDeclParserRuleCall_1_0()); 
	    }
		lv_packages_1_0=ruleFProcessPackageDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDocumentRootRule());
	        }
       		add(
       			$current, 
       			"packages",
        		lv_packages_1_0, 
        		"FProcessPackageDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;







// Entry rule entryRuleFProcessPackageDecl
entryRuleFProcessPackageDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFProcessPackageDeclRule()); }
	 iv_ruleFProcessPackageDecl=ruleFProcessPackageDecl 
	 { $current=$iv_ruleFProcessPackageDecl.current; } 
	 EOF 
;

// Rule FProcessPackageDecl
ruleFProcessPackageDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFProcessPackageDeclAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFProcessPackageDeclAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFProcessPackageDeclRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFProcessPackageDeclAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFProcessPackageDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFProcessPackageDeclAccess().getProcessesFProcessParserRuleCall_3_0()); 
	    }
		lv_processes_3_0=ruleFProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFProcessPackageDeclRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_3_0, 
        		"FProcess");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_4='end package' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFProcessPackageDeclAccess().getEndPackageKeyword_4());
    }
)?)
;





// Entry rule entryRuleFProcess
entryRuleFProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFProcessRule()); }
	 iv_ruleFProcess=ruleFProcess 
	 { $current=$iv_ruleFProcess.current; } 
	 EOF 
;

// Rule FProcess
ruleFProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='process' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFProcessAccess().getProcessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFProcessAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFProcessAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='for usecase' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFProcessAccess().getForUsecaseKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFProcessRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFProcessAccess().getUsecaseFExtUseCaseCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getFProcessAccess().getPoolsFPoolParserRuleCall_4_0_0()); 
	    }
		lv_pools_5_0=ruleFPool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFProcessRule());
	        }
       		add(
       			$current, 
       			"pools",
        		lv_pools_5_0, 
        		"FPool");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFProcessAccess().getFlowNodesFFlowNodeParserRuleCall_4_1_0()); 
	    }
		lv_flowNodes_6_0=ruleFFlowNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFProcessRule());
	        }
       		add(
       			$current, 
       			"flowNodes",
        		lv_flowNodes_6_0, 
        		"FFlowNode");
	        afterParserOrEnumRuleCall();
	    }

)
)+)(	otherlv_7='end process' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFProcessAccess().getEndProcessKeyword_5());
    }
)?)
;





// Entry rule entryRuleFPool
entryRuleFPool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFPoolRule()); }
	 iv_ruleFPool=ruleFPool 
	 { $current=$iv_ruleFPool.current; } 
	 EOF 
;

// Rule FPool
ruleFPool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFPoolAccess().getFPoolAction_0(),
            $current);
    }
)	otherlv_1='pool' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFPoolAccess().getPoolKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFPoolAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFPoolRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_3_0=RULE_STRING
		{
			newLeafNode(lv_label_3_0, grammarAccess.getFPoolAccess().getLabelSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFPoolRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_3_0, 
        		"STRING");
	    }

)
)?(	otherlv_4='for actor' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFPoolAccess().getForActorKeyword_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFPoolRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFPoolAccess().getActorFExtActorCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_initializing_6_0=	'initializing' 
    {
        newLeafNode(lv_initializing_6_0, grammarAccess.getFPoolAccess().getInitializingInitializingKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFPoolRule());
	        }
       		setWithLastConsumed($current, "initializing", true, "initializing");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFPoolAccess().getFlowNodesFFlowNodeParserRuleCall_6_0()); 
	    }
		lv_flowNodes_7_0=ruleFFlowNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFPoolRule());
	        }
       		add(
       			$current, 
       			"flowNodes",
        		lv_flowNodes_7_0, 
        		"FFlowNode");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8='end pool' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFPoolAccess().getEndPoolKeyword_7());
    }
)?)
;





// Entry rule entryRuleFFlowNode
entryRuleFFlowNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFFlowNodeRule()); }
	 iv_ruleFFlowNode=ruleFFlowNode 
	 { $current=$iv_ruleFFlowNode.current; } 
	 EOF 
;

// Rule FFlowNode
ruleFFlowNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFFlowNodeAccess().getFActivityParserRuleCall_0()); 
    }
    this_FActivity_0=ruleFActivity
    { 
        $current = $this_FActivity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFFlowNodeAccess().getFGatewayParserRuleCall_1()); 
    }
    this_FGateway_1=ruleFGateway
    { 
        $current = $this_FGateway_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFFlowNodeAccess().getFEventParserRuleCall_2()); 
    }
    this_FEvent_2=ruleFEvent
    { 
        $current = $this_FEvent_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFFlowNodeAccess().getFLaneParserRuleCall_3()); 
    }
    this_FLane_3=ruleFLane
    { 
        $current = $this_FLane_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFLane
entryRuleFLane returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFLaneRule()); }
	 iv_ruleFLane=ruleFLane 
	 { $current=$iv_ruleFLane.current; } 
	 EOF 
;

// Rule FLane
ruleFLane returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='lane' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFLaneAccess().getLaneKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFLaneAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFLaneRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFLaneAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFLaneRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='for actor' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFLaneAccess().getForActorKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFLaneRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFLaneAccess().getActorFExtActorCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_initializing_5_0=	'initializing' 
    {
        newLeafNode(lv_initializing_5_0, grammarAccess.getFLaneAccess().getInitializingInitializingKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFLaneRule());
	        }
       		setWithLastConsumed($current, "initializing", true, "initializing");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFLaneAccess().getFlowNodesFFlowNodeParserRuleCall_5_0()); 
	    }
		lv_flowNodes_6_0=ruleFFlowNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFLaneRule());
	        }
       		add(
       			$current, 
       			"flowNodes",
        		lv_flowNodes_6_0, 
        		"FFlowNode");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='end lane' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFLaneAccess().getEndLaneKeyword_6());
    }
)
;





// Entry rule entryRuleFEvent
entryRuleFEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEventRule()); }
	 iv_ruleFEvent=ruleFEvent 
	 { $current=$iv_ruleFEvent.current; } 
	 EOF 
;

// Rule FEvent
ruleFEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFEventAccess().getEventTypeFEventTypeEnumRuleCall_0_0()); 
	    }
		lv_eventType_0_0=ruleFEventType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEventRule());
	        }
       		set(
       			$current, 
       			"eventType",
        		lv_eventType_0_0, 
        		"FEventType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='of type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFEventAccess().getOfTypeKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFEventAccess().getEventDefinitionTypeFEventDefinitionTypeEnumRuleCall_1_1_0()); 
	    }
		lv_eventDefinitionType_2_0=ruleFEventDefinitionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEventRule());
	        }
       		set(
       			$current, 
       			"eventDefinitionType",
        		lv_eventDefinitionType_2_0, 
        		"FEventDefinitionType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		lv_nonInterrupting_3_0=	'non-interrupting' 
    {
        newLeafNode(lv_nonInterrupting_3_0, grammarAccess.getFEventAccess().getNonInterruptingNonInterruptingKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventRule());
	        }
       		setWithLastConsumed($current, "nonInterrupting", true, "non-interrupting");
	    }

)
)?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFEventAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_5_0=RULE_STRING
		{
			newLeafNode(lv_label_5_0, grammarAccess.getFEventAccess().getLabelSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_5_0, 
        		"STRING");
	    }

)
)?(	otherlv_6='for page' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFEventAccess().getForPageKeyword_5_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEventAccess().getDialogFExtPageCrossReference_5_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFEventAccess().getAttachmentsFAttachmentParserRuleCall_6_0()); 
	    }
		lv_attachments_8_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEventRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_8_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFActivity
entryRuleFActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFActivityRule()); }
	 iv_ruleFActivity=ruleFActivity 
	 { $current=$iv_ruleFActivity.current; } 
	 EOF 
;

// Rule FActivity
ruleFActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFActivityAccess().getFTaskParserRuleCall_0()); 
    }
    this_FTask_0=ruleFTask
    { 
        $current = $this_FTask_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFActivityAccess().getFCallActivityParserRuleCall_1()); 
    }
    this_FCallActivity_1=ruleFCallActivity
    { 
        $current = $this_FCallActivity_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFActivityAccess().getFSubProcessParserRuleCall_2()); 
    }
    this_FSubProcess_2=ruleFSubProcess
    { 
        $current = $this_FSubProcess_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFTask
entryRuleFTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTaskRule()); }
	 iv_ruleFTask=ruleFTask 
	 { $current=$iv_ruleFTask.current; } 
	 EOF 
;

// Rule FTask
ruleFTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFTaskAccess().getTaskTypeFTaskTypeEnumRuleCall_0_0()); 
	    }
		lv_taskType_0_0=ruleFTaskType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTaskRule());
	        }
       		set(
       			$current, 
       			"taskType",
        		lv_taskType_0_0, 
        		"FTaskType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFTaskAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFTaskAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='for dialog' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFTaskAccess().getForDialogKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTaskRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFTaskAccess().getDialogFExtDialogCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFTaskAccess().getAttachmentsFAttachmentParserRuleCall_4_0()); 
	    }
		lv_attachments_5_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTaskRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_5_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFCallActivity
entryRuleFCallActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFCallActivityRule()); }
	 iv_ruleFCallActivity=ruleFCallActivity 
	 { $current=$iv_ruleFCallActivity.current; } 
	 EOF 
;

// Rule FCallActivity
ruleFCallActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='callactivity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFCallActivityAccess().getCallactivityKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFCallActivityAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFCallActivityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFCallActivityAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFCallActivityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='calling' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFCallActivityAccess().getCallingKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFCallActivityRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFCallActivityAccess().getCalledElementFProcessCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getFCallActivityAccess().getAttachmentsFAttachmentParserRuleCall_4_0()); 
	    }
		lv_attachments_5_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFCallActivityRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_5_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFSubProcess
entryRuleFSubProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFSubProcessRule()); }
	 iv_ruleFSubProcess=ruleFSubProcess 
	 { $current=$iv_ruleFSubProcess.current; } 
	 EOF 
;

// Rule FSubProcess
ruleFSubProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subprocess' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFSubProcessAccess().getSubprocessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFSubProcessAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSubProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFSubProcessAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSubProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFSubProcessAccess().getAttachmentsFAttachmentParserRuleCall_3_0()); 
	    }
		lv_attachments_3_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFSubProcessRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_3_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFSubProcessAccess().getFlowNodesFFlowNodeParserRuleCall_4_0()); 
	    }
		lv_flowNodes_4_0=ruleFFlowNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFSubProcessRule());
	        }
       		add(
       			$current, 
       			"flowNodes",
        		lv_flowNodes_4_0, 
        		"FFlowNode");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='end subprocess' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFSubProcessAccess().getEndSubprocessKeyword_5());
    }
)
;





// Entry rule entryRuleFGateway
entryRuleFGateway returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFGatewayRule()); }
	 iv_ruleFGateway=ruleFGateway 
	 { $current=$iv_ruleFGateway.current; } 
	 EOF 
;

// Rule FGateway
ruleFGateway returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFGatewayAccess().getFGatewayDivergingParserRuleCall_0()); 
    }
    this_FGatewayDiverging_0=ruleFGatewayDiverging
    { 
        $current = $this_FGatewayDiverging_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFGatewayAccess().getFGatewayConvergingParserRuleCall_1()); 
    }
    this_FGatewayConverging_1=ruleFGatewayConverging
    { 
        $current = $this_FGatewayConverging_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFGatewayDiverging
entryRuleFGatewayDiverging returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFGatewayDivergingRule()); }
	 iv_ruleFGatewayDiverging=ruleFGatewayDiverging 
	 { $current=$iv_ruleFGatewayDiverging.current; } 
	 EOF 
;

// Rule FGatewayDiverging
ruleFGatewayDiverging returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayDivergingAccess().getGatewayTypeFGatewayTypeEnumRuleCall_0_0()); 
	    }
		lv_gatewayType_0_0=ruleFGatewayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayDivergingRule());
	        }
       		set(
       			$current, 
       			"gatewayType",
        		lv_gatewayType_0_0, 
        		"FGatewayType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFGatewayDivergingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFGatewayDivergingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFGatewayDivergingAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFGatewayDivergingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayDivergingAccess().getAttachmentsFAttachmentParserRuleCall_3_0()); 
	    }
		lv_attachments_3_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayDivergingRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_3_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayDivergingAccess().getOptionsFOptionParserRuleCall_4_0()); 
	    }
		lv_options_4_0=ruleFOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayDivergingRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_4_0, 
        		"FOption");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayDivergingAccess().getGatewayConvergingFGatewayConvergingParserRuleCall_5_0()); 
	    }
		lv_gatewayConverging_5_0=ruleFGatewayConverging		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayDivergingRule());
	        }
       		set(
       			$current, 
       			"gatewayConverging",
        		lv_gatewayConverging_5_0, 
        		"FGatewayConverging");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFGatewayConverging
entryRuleFGatewayConverging returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFGatewayConvergingRule()); }
	 iv_ruleFGatewayConverging=ruleFGatewayConverging 
	 { $current=$iv_ruleFGatewayConverging.current; } 
	 EOF 
;

// Rule FGatewayConverging
ruleFGatewayConverging returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='merge' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFGatewayConvergingAccess().getMergeKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayConvergingAccess().getGatewayTypeFGatewayTypeEnumRuleCall_0_1_0()); 
	    }
		lv_gatewayType_1_0=ruleFGatewayType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayConvergingRule());
	        }
       		set(
       			$current, 
       			"gatewayType",
        		lv_gatewayType_1_0, 
        		"FGatewayType");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFGatewayConvergingAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFGatewayConvergingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_3_0=RULE_STRING
		{
			newLeafNode(lv_label_3_0, grammarAccess.getFGatewayConvergingAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFGatewayConvergingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_3_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFGatewayConvergingAccess().getAttachmentsFAttachmentParserRuleCall_3_0()); 
	    }
		lv_attachments_4_0=ruleFAttachment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGatewayConvergingRule());
	        }
       		add(
       			$current, 
       			"attachments",
        		lv_attachments_4_0, 
        		"FAttachment");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFOptionFlowNode
entryRuleFOptionFlowNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFOptionFlowNodeRule()); }
	 iv_ruleFOptionFlowNode=ruleFOptionFlowNode 
	 { $current=$iv_ruleFOptionFlowNode.current; } 
	 EOF 
;

// Rule FOptionFlowNode
ruleFOptionFlowNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFOptionFlowNodeAccess().getFActivityParserRuleCall_0()); 
    }
    this_FActivity_0=ruleFActivity
    { 
        $current = $this_FActivity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFOptionFlowNodeAccess().getFEventParserRuleCall_1()); 
    }
    this_FEvent_1=ruleFEvent
    { 
        $current = $this_FEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFOptionFlowNodeAccess().getFGatewayDivergingParserRuleCall_2()); 
    }
    this_FGatewayDiverging_2=ruleFGatewayDiverging
    { 
        $current = $this_FGatewayDiverging_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFOption
entryRuleFOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFOptionRule()); }
	 iv_ruleFOption=ruleFOption 
	 { $current=$iv_ruleFOption.current; } 
	 EOF 
;

// Rule FOption
ruleFOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFOptionAccess().getFOptionAction_0(),
            $current);
    }
)	otherlv_1='option' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFOptionAccess().getOptionKeyword_1());
    }
(
(
		lv_default_2_0=	'default' 
    {
        newLeafNode(lv_default_2_0, grammarAccess.getFOptionAccess().getDefaultDefaultKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFOptionRule());
	        }
       		setWithLastConsumed($current, "default", true, "default");
	    }

)
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFOptionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_4_0=RULE_STRING
		{
			newLeafNode(lv_label_4_0, grammarAccess.getFOptionAccess().getLabelSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_4_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFOptionAccess().getFlowNodesFOptionFlowNodeParserRuleCall_5_0()); 
	    }
		lv_flowNodes_5_0=ruleFOptionFlowNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFOptionRule());
	        }
       		add(
       			$current, 
       			"flowNodes",
        		lv_flowNodes_5_0, 
        		"FOptionFlowNode");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFAttachment
entryRuleFAttachment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAttachmentRule()); }
	 iv_ruleFAttachment=ruleFAttachment 
	 { $current=$iv_ruleFAttachment.current; } 
	 EOF 
;

// Rule FAttachment
ruleFAttachment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFSendMessageParserRuleCall_0()); 
    }
    this_FSendMessage_0=ruleFSendMessage
    { 
        $current = $this_FSendMessage_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFSendDataParserRuleCall_1()); 
    }
    this_FSendData_1=ruleFSendData
    { 
        $current = $this_FSendData_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFDataIOParserRuleCall_2()); 
    }
    this_FDataIO_2=ruleFDataIO
    { 
        $current = $this_FDataIO_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFAnnotationParserRuleCall_3()); 
    }
    this_FAnnotation_3=ruleFAnnotation
    { 
        $current = $this_FAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFDocumentationParserRuleCall_4()); 
    }
    this_FDocumentation_4=ruleFDocumentation
    { 
        $current = $this_FDocumentation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFAttachmentAccess().getFFlowParserRuleCall_5()); 
    }
    this_FFlow_5=ruleFFlow
    { 
        $current = $this_FFlow_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleFSendMessage
entryRuleFSendMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFSendMessageRule()); }
	 iv_ruleFSendMessage=ruleFSendMessage 
	 { $current=$iv_ruleFSendMessage.current; } 
	 EOF 
;

// Rule FSendMessage
ruleFSendMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='send message' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFSendMessageAccess().getSendMessageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFSendMessageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFSendMessageAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFSendMessageAccess().getToKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendMessageRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSendMessageAccess().getReceivingElementFInteractionNodeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_5='of datatype' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFSendMessageAccess().getOfDatatypeKeyword_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendMessageRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSendMessageAccess().getDataTypeFExtDataTypeCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFSendData
entryRuleFSendData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFSendDataRule()); }
	 iv_ruleFSendData=ruleFSendData 
	 { $current=$iv_ruleFSendData.current; } 
	 EOF 
;

// Rule FSendData
ruleFSendData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='send data' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFSendDataAccess().getSendDataKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFSendDataAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFSendDataAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFSendDataAccess().getToKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendDataRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSendDataAccess().getReceivingElementFFlowNodeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_5='of datatype' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFSendDataAccess().getOfDatatypeKeyword_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSendDataRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSendDataAccess().getDataTypeFExtDataTypeCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFDataIO
entryRuleFDataIO returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDataIORule()); }
	 iv_ruleFDataIO=ruleFDataIO 
	 { $current=$iv_ruleFDataIO.current; } 
	 EOF 
;

// Rule FDataIO
ruleFDataIO returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFDataIOAccess().getDataIoTypeFDataIOTypeEnumRuleCall_0_0()); 
	    }
		lv_dataIoType_0_0=ruleFDataIOType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDataIORule());
	        }
       		set(
       			$current, 
       			"dataIoType",
        		lv_dataIoType_0_0, 
        		"FDataIOType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDataIOAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDataIORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFDataIOAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDataIORule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='of datatype' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDataIOAccess().getOfDatatypeKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDataIORule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDataIOAccess().getDataTypeFExtDataTypeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFAnnotation
entryRuleFAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAnnotationRule()); }
	 iv_ruleFAnnotation=ruleFAnnotation 
	 { $current=$iv_ruleFAnnotation.current; } 
	 EOF 
;

// Rule FAnnotation
ruleFAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='annotation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFAnnotationAccess().getAnnotationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFAnnotationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getFAnnotationAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleFDocumentation
entryRuleFDocumentation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDocumentationRule()); }
	 iv_ruleFDocumentation=ruleFDocumentation 
	 { $current=$iv_ruleFDocumentation.current; } 
	 EOF 
;

// Rule FDocumentation
ruleFDocumentation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='documentation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDocumentationAccess().getDocumentationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDocumentationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDocumentationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getFDocumentationAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDocumentationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleFFlow
entryRuleFFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFFlowRule()); }
	 iv_ruleFFlow=ruleFFlow 
	 { $current=$iv_ruleFFlow.current; } 
	 EOF 
;

// Rule FFlow
ruleFFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='flow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFFlowAccess().getFlowKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFFlowAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFFlowAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFFlowAccess().getToKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFlowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFFlowAccess().getTargetRefFFlowNodeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFSequenceFlow
entryRuleFSequenceFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFSequenceFlowRule()); }
	 iv_ruleFSequenceFlow=ruleFSequenceFlow 
	 { $current=$iv_ruleFSequenceFlow.current; } 
	 EOF 
;

// Rule FSequenceFlow
ruleFSequenceFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sequence flow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFSequenceFlowAccess().getSequenceFlowKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFSequenceFlowAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSequenceFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFSequenceFlowAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSequenceFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='from' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFSequenceFlowAccess().getFromKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSequenceFlowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSequenceFlowAccess().getSourceRefFFlowNodeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFSequenceFlowAccess().getToKeyword_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFSequenceFlowRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFSequenceFlowAccess().getTargetRefFFlowNodeCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFDiDiagramElement
entryRuleFDiDiagramElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDiDiagramElementRule()); }
	 iv_ruleFDiDiagramElement=ruleFDiDiagramElement 
	 { $current=$iv_ruleFDiDiagramElement.current; } 
	 EOF 
;

// Rule FDiDiagramElement
ruleFDiDiagramElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiDiagramElementAccess().getFDiDiagramParserRuleCall_0()); 
    }
    this_FDiDiagram_0=ruleFDiDiagram
    { 
        $current = $this_FDiDiagram_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiDiagramElementAccess().getFDiPlaneParserRuleCall_1()); 
    }
    this_FDiPlane_1=ruleFDiPlane
    { 
        $current = $this_FDiPlane_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiDiagramElementAccess().getFDiPlaneElementParserRuleCall_2()); 
    }
    this_FDiPlaneElement_2=ruleFDiPlaneElement
    { 
        $current = $this_FDiPlaneElement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiDiagramElementAccess().getFDiBoundsParserRuleCall_3()); 
    }
    this_FDiBounds_3=ruleFDiBounds
    { 
        $current = $this_FDiBounds_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiDiagramElementAccess().getFDiWaypointParserRuleCall_4()); 
    }
    this_FDiWaypoint_4=ruleFDiWaypoint
    { 
        $current = $this_FDiWaypoint_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDiDiagram
entryRuleFDiDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDiDiagramRule()); }
	 iv_ruleFDiDiagram=ruleFDiDiagram 
	 { $current=$iv_ruleFDiDiagram.current; } 
	 EOF 
;

// Rule FDiDiagram
ruleFDiDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='diagram' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiDiagramAccess().getDiagramKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDiDiagramAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiDiagramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getFDiDiagramAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiDiagramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFDiDiagramAccess().getPlaneFDiPlaneParserRuleCall_3_0()); 
	    }
		lv_plane_3_0=ruleFDiPlane		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDiDiagramRule());
	        }
       		set(
       			$current, 
       			"plane",
        		lv_plane_3_0, 
        		"FDiPlane");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFDiPlane
entryRuleFDiPlane returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDiPlaneRule()); }
	 iv_ruleFDiPlane=ruleFDiPlane 
	 { $current=$iv_ruleFDiPlane.current; } 
	 EOF 
;

// Rule FDiPlane
ruleFDiPlane returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='plane' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiPlaneAccess().getPlaneKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDiPlaneAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiPlaneRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDiPlaneAccess().getForKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiPlaneRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDiPlaneAccess().getBpmnElementFProcessCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFDiPlaneAccess().getPlaneElementsFDiPlaneElementParserRuleCall_3_0()); 
	    }
		lv_planeElements_4_0=ruleFDiPlaneElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDiPlaneRule());
	        }
       		add(
       			$current, 
       			"planeElements",
        		lv_planeElements_4_0, 
        		"FDiPlaneElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleFDiPlaneElement
entryRuleFDiPlaneElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDiPlaneElementRule()); }
	 iv_ruleFDiPlaneElement=ruleFDiPlaneElement 
	 { $current=$iv_ruleFDiPlaneElement.current; } 
	 EOF 
;

// Rule FDiPlaneElement
ruleFDiPlaneElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiPlaneElementAccess().getFDiShapeParserRuleCall_0()); 
    }
    this_FDiShape_0=ruleFDiShape
    { 
        $current = $this_FDiShape_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFDiPlaneElementAccess().getFDiEdgeParserRuleCall_1()); 
    }
    this_FDiEdge_1=ruleFDiEdge
    { 
        $current = $this_FDiEdge_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDiShape
entryRuleFDiShape returns [EObject current=null] 
	@init { 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiShapeAccess().getUnorderedGroup_3()
		);
	}
	:
	{ newCompositeNode(grammarAccess.getFDiShapeRule()); }
	 iv_ruleFDiShape=ruleFDiShape 
	 { $current=$iv_ruleFDiShape.current; } 
	 EOF 
;
finally {
	myUnorderedGroupState.restore();
}

// Rule FDiShape
ruleFDiShape returns [EObject current=null] 
    @init { enterRule(); 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiShapeAccess().getUnorderedGroup_3()
		);
    }
    @after { leaveRule(); }:
(	otherlv_0='shape' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiShapeAccess().getShapeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDiShapeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiShapeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDiShapeAccess().getForKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiShapeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDiShapeAccess().getFlowNodeFFlowNodeCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 0);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getFDiShapeAccess().getBoundsFDiBoundsParserRuleCall_3_0_0()); 
	    }
		lv_bounds_5_0=ruleFDiBounds		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDiShapeRule());
	        }
       		set(
       			$current, 
       			"bounds",
        		lv_bounds_5_0, 
        		"FDiBounds");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 1);
	 				}
					({true}?=>(
(
		lv_isExpanded_6_0=	'expanded' 
    {
        newLeafNode(lv_isExpanded_6_0, grammarAccess.getFDiShapeAccess().getIsExpandedExpandedKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiShapeRule());
	        }
       		setWithLastConsumed($current, "isExpanded", true, "expanded");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3(), 2);
	 				}
					({true}?=>(
(
		lv_isHorizontal_7_0=	'horizontal' 
    {
        newLeafNode(lv_isHorizontal_7_0, grammarAccess.getFDiShapeAccess().getIsHorizontalHorizontalKeyword_3_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiShapeRule());
	        }
       		setWithLastConsumed($current, "isHorizontal", true, "horizontal");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFDiShapeAccess().getUnorderedGroup_3());
	}

))
;
finally {
	myUnorderedGroupState.restore();
}





// Entry rule entryRuleFDiEdge
entryRuleFDiEdge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDiEdgeRule()); }
	 iv_ruleFDiEdge=ruleFDiEdge 
	 { $current=$iv_ruleFDiEdge.current; } 
	 EOF 
;

// Rule FDiEdge
ruleFDiEdge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='edge' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiEdgeAccess().getEdgeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFDiEdgeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiEdgeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDiEdgeAccess().getForKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiEdgeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDiEdgeAccess().getSequenceFlowFSequenceFlowCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='from' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDiEdgeAccess().getFromKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiEdgeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDiEdgeAccess().getSourceDiagramShapeFDiShapeCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDiEdgeAccess().getToKeyword_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiEdgeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDiEdgeAccess().getTargetDiagramShapeFDiShapeCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getFDiEdgeAccess().getWaypointsFDiWaypointParserRuleCall_5_0()); 
	    }
		lv_waypoints_8_0=ruleFDiWaypoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDiEdgeRule());
	        }
       		add(
       			$current, 
       			"waypoints",
        		lv_waypoints_8_0, 
        		"FDiWaypoint");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleFDiBounds
entryRuleFDiBounds returns [EObject current=null] 
	@init { 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1()
		);
	}
	:
	{ newCompositeNode(grammarAccess.getFDiBoundsRule()); }
	 iv_ruleFDiBounds=ruleFDiBounds 
	 { $current=$iv_ruleFDiBounds.current; } 
	 EOF 
;
finally {
	myUnorderedGroupState.restore();
}

// Rule FDiBounds
ruleFDiBounds returns [EObject current=null] 
    @init { enterRule(); 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1()
		);
    }
    @after { leaveRule(); }:
(	otherlv_0='bounds' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiBoundsAccess().getBoundsKeyword_0());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 0);
	 				}
					({true}?=>(	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDiBoundsAccess().getXKeyword_1_0_0());
    }
(
(
		lv_x_3_0=RULE_INT
		{
			newLeafNode(lv_x_3_0, grammarAccess.getFDiBoundsAccess().getXINTTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiBoundsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_3_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 1);
	 				}
					({true}?=>(	otherlv_4='y' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDiBoundsAccess().getYKeyword_1_1_0());
    }
(
(
		lv_y_5_0=RULE_INT
		{
			newLeafNode(lv_y_5_0, grammarAccess.getFDiBoundsAccess().getYINTTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiBoundsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_5_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 2);
	 				}
					({true}?=>(	otherlv_6='width' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDiBoundsAccess().getWidthKeyword_1_2_0());
    }
(
(
		lv_width_7_0=RULE_INT
		{
			newLeafNode(lv_width_7_0, grammarAccess.getFDiBoundsAccess().getWidthINTTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiBoundsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"width",
        		lv_width_7_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1(), 3);
	 				}
					({true}?=>(	otherlv_8='height' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFDiBoundsAccess().getHeightKeyword_1_3_0());
    }
(
(
		lv_height_9_0=RULE_INT
		{
			newLeafNode(lv_height_9_0, grammarAccess.getFDiBoundsAccess().getHeightINTTerminalRuleCall_1_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiBoundsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"height",
        		lv_height_9_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFDiBoundsAccess().getUnorderedGroup_1());
	}

))
;
finally {
	myUnorderedGroupState.restore();
}





// Entry rule entryRuleFDiWaypoint
entryRuleFDiWaypoint returns [EObject current=null] 
	@init { 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1()
		);
	}
	:
	{ newCompositeNode(grammarAccess.getFDiWaypointRule()); }
	 iv_ruleFDiWaypoint=ruleFDiWaypoint 
	 { $current=$iv_ruleFDiWaypoint.current; } 
	 EOF 
;
finally {
	myUnorderedGroupState.restore();
}

// Rule FDiWaypoint
ruleFDiWaypoint returns [EObject current=null] 
    @init { enterRule(); 
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
			grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1()
		);
    }
    @after { leaveRule(); }:
(	otherlv_0='waypoint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDiWaypointAccess().getWaypointKeyword_0());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1(), 0);
	 				}
					({true}?=>(	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDiWaypointAccess().getXKeyword_1_0_0());
    }
(
(
		lv_x_3_0=RULE_INT
		{
			newLeafNode(lv_x_3_0, grammarAccess.getFDiWaypointAccess().getXINTTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_3_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1(), 1);
	 				}
					({true}?=>(	otherlv_4='y' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDiWaypointAccess().getYKeyword_1_1_0());
    }
(
(
		lv_y_5_0=RULE_INT
		{
			newLeafNode(lv_y_5_0, grammarAccess.getFDiWaypointAccess().getYINTTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDiWaypointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_5_0, 
        		"INT");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getFDiWaypointAccess().getUnorderedGroup_1());
	}

))
;
finally {
	myUnorderedGroupState.restore();
}





// Entry rule entryRuleFExternal
entryRuleFExternal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExternalRule()); }
	 iv_ruleFExternal=ruleFExternal 
	 { $current=$iv_ruleFExternal.current; } 
	 EOF 
;

// Rule FExternal
ruleFExternal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFExternalAccess().getFExtActorParserRuleCall_0()); 
    }
    this_FExtActor_0=ruleFExtActor
    { 
        $current = $this_FExtActor_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFExternalAccess().getFExtUseCaseParserRuleCall_1()); 
    }
    this_FExtUseCase_1=ruleFExtUseCase
    { 
        $current = $this_FExtUseCase_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFExternalAccess().getFExtPageParserRuleCall_2()); 
    }
    this_FExtPage_2=ruleFExtPage
    { 
        $current = $this_FExtPage_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFExternalAccess().getFExtDialogParserRuleCall_3()); 
    }
    this_FExtDialog_3=ruleFExtDialog
    { 
        $current = $this_FExtDialog_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFExternalAccess().getFExtDataTypeParserRuleCall_4()); 
    }
    this_FExtDataType_4=ruleFExtDataType
    { 
        $current = $this_FExtDataType_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFExtActor
entryRuleFExtActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExtActorRule()); }
	 iv_ruleFExtActor=ruleFExtActor 
	 { $current=$iv_ruleFExtActor.current; } 
	 EOF 
;

// Rule FExtActor
ruleFExtActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='actor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFExtActorAccess().getActorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFExtActorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFExtActorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFExtUseCase
entryRuleFExtUseCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExtUseCaseRule()); }
	 iv_ruleFExtUseCase=ruleFExtUseCase 
	 { $current=$iv_ruleFExtUseCase.current; } 
	 EOF 
;

// Rule FExtUseCase
ruleFExtUseCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='usecase' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFExtUseCaseAccess().getUsecaseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFExtUseCaseAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFExtUseCaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFExtPage
entryRuleFExtPage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExtPageRule()); }
	 iv_ruleFExtPage=ruleFExtPage 
	 { $current=$iv_ruleFExtPage.current; } 
	 EOF 
;

// Rule FExtPage
ruleFExtPage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='page' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFExtPageAccess().getPageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFExtPageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFExtPageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFExtDialog
entryRuleFExtDialog returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExtDialogRule()); }
	 iv_ruleFExtDialog=ruleFExtDialog 
	 { $current=$iv_ruleFExtDialog.current; } 
	 EOF 
;

// Rule FExtDialog
ruleFExtDialog returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dialog' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFExtDialogAccess().getDialogKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFExtDialogAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFExtDialogRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFExtDataType
entryRuleFExtDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFExtDataTypeRule()); }
	 iv_ruleFExtDataType=ruleFExtDataType 
	 { $current=$iv_ruleFExtDataType.current; } 
	 EOF 
;

// Rule FExtDataType
ruleFExtDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='datatype' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFExtDataTypeAccess().getDatatypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFExtDataTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFExtDataTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule FTaskType
ruleFTaskType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getBLANKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFTaskTypeAccess().getBLANKEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='business rule task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getBUSINESSRULEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFTaskTypeAccess().getBUSINESSRULEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='manual task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getMANUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFTaskTypeAccess().getMANUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='receive task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getRECEIVEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFTaskTypeAccess().getRECEIVEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='script task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getSCRIPTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFTaskTypeAccess().getSCRIPTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='send task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getSENDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFTaskTypeAccess().getSENDEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='service task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getSERVICEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFTaskTypeAccess().getSERVICEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='user task' 
	{
        $current = grammarAccess.getFTaskTypeAccess().getUSEREnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFTaskTypeAccess().getUSEREnumLiteralDeclaration_7()); 
    }
));



// Rule FEventType
ruleFEventType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getEVENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFEventTypeAccess().getEVENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='start event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getSTARTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFEventTypeAccess().getSTARTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='throwing event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getTHROWEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFEventTypeAccess().getTHROWEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='catching event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getCATCHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFEventTypeAccess().getCATCHEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='intermediate catching event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getINTERMEDIATE_CATCHEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFEventTypeAccess().getINTERMEDIATE_CATCHEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='intermediate throwing event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getINTERMEDIATE_THROWEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFEventTypeAccess().getINTERMEDIATE_THROWEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='end event' 
	{
        $current = grammarAccess.getFEventTypeAccess().getENDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFEventTypeAccess().getENDEnumLiteralDeclaration_6()); 
    }
));



// Rule FEventDefinitionType
ruleFEventDefinitionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='blank' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getBLANKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFEventDefinitionTypeAccess().getBLANKEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='message' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getMESSAGEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFEventDefinitionTypeAccess().getMESSAGEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='timer' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getTIMEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFEventDefinitionTypeAccess().getTIMEREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='error' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getERROREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFEventDefinitionTypeAccess().getERROREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='escalation' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getESCALATIONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFEventDefinitionTypeAccess().getESCALATIONEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='cancel' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getCANCELEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFEventDefinitionTypeAccess().getCANCELEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='compensation' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getCOMPENSATIONEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFEventDefinitionTypeAccess().getCOMPENSATIONEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='conditional' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getCONDITIONALEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFEventDefinitionTypeAccess().getCONDITIONALEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='link' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getLINKEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFEventDefinitionTypeAccess().getLINKEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='signal' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getSIGNALEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFEventDefinitionTypeAccess().getSIGNALEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='terminate' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getTERMINATEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFEventDefinitionTypeAccess().getTERMINATEEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='multiple' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getMULTIPLEEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getFEventDefinitionTypeAccess().getMULTIPLEEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='parallel multiple' 
	{
        $current = grammarAccess.getFEventDefinitionTypeAccess().getPARALLEL_MULTIPLEEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getFEventDefinitionTypeAccess().getPARALLEL_MULTIPLEEnumLiteralDeclaration_12()); 
    }
));



// Rule FGatewayType
ruleFGatewayType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getBLANKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFGatewayTypeAccess().getBLANKEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='parallel gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getPARALLELEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFGatewayTypeAccess().getPARALLELEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='and gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getPARALLELEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFGatewayTypeAccess().getPARALLELEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='inclusive gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getINCLUSIVEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFGatewayTypeAccess().getINCLUSIVEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='or gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getINCLUSIVEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFGatewayTypeAccess().getINCLUSIVEEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='exclusive gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getEXCLUSIVEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFGatewayTypeAccess().getEXCLUSIVEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='xor gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getEXCLUSIVEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFGatewayTypeAccess().getEXCLUSIVEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='eventbased gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getEVENTBASEDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFGatewayTypeAccess().getEVENTBASEDEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='complex gateway' 
	{
        $current = grammarAccess.getFGatewayTypeAccess().getCOMPLEXEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFGatewayTypeAccess().getCOMPLEXEnumLiteralDeclaration_8()); 
    }
));



// Rule FDataIOType
ruleFDataIOType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='data input/output' 
	{
        $current = grammarAccess.getFDataIOTypeAccess().getBLANKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFDataIOTypeAccess().getBLANKEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='data input' 
	{
        $current = grammarAccess.getFDataIOTypeAccess().getINPUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFDataIOTypeAccess().getINPUTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='data output' 
	{
        $current = grammarAccess.getFDataIOTypeAccess().getOUTPUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFDataIOTypeAccess().getOUTPUTEnumLiteralDeclaration_2()); 
    }
));









RULE_ID : '^'? ('\u00E4'|'\u00F6'|'\u00FC'|'a'..'z'|'A'..'Z'|'\u00C4'|'\u00D6'|'\u00DC'|'_') ('\u00E4'|'\u00F6'|'\u00FC'|'\u00DF'|'a'..'z'|'\u00C4'|'\u00D6'|'\u00DC'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


